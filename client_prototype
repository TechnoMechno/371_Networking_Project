import socket
import threading
import pygame

HOST = '127.0.0.1'  # Change to your server IP
TCP_PORT = 5555
UDP_PORT = 5556

network_score = 0
start_udp_mode = False
is_first_player = False
player_status_message = "Connecting..."

def tcp_receive(tcp_sock):
    global start_udp_mode, is_first_player, player_status_message
    while True:
        try:
            message = tcp_sock.recv(1024).decode().strip()
            if not message:
                break

            if ":" in message:
                player_info, status = message.split(":")
                if status == "FIRST_PLAYER":
                    is_first_player = True
                    player_status_message = f"{player_info}: Press 'S' to start the game."
                elif status == "WAITING_FOR_START":
                    is_first_player = False
                    player_status_message = f"{player_info}: Waiting for Player 1 to start."
                elif status == "NEED_MORE_PLAYERS":
                    player_status_message = "Need at least 2 players to start."

            if message == "GAME_START":
                start_udp_mode = True
                print("Game is starting!")

        except Exception as e:
            print(f"TCP receive error: {e}")
            break

def udp_receive(udp_sock):
    global network_score
    while True:
        try:
            data, _ = udp_sock.recvfrom(1024)
            message = data.decode().strip()
            if message.startswith("Score:"):
                try:
                    network_score = int(message.split(":")[1].strip())
                    print("Cookie collected! New score:", network_score)
                except ValueError:
                    pass
        except Exception as e:
            print("UDP receive error:", e)
            break

def udp_mode():
    udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_sock.bind(('', 0))
    udp_sock.sendto("register".encode(), (HOST, UDP_PORT))

    threading.Thread(target=udp_receive, args=(udp_sock,), daemon=True).start()

    pygame.init()
    screen = pygame.display.set_mode((800, 600))
    pygame.display.set_caption("Client Game Window")
    font = pygame.font.Font(None, 36)
    clock = pygame.time.Clock()

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                udp_sock.sendto("quit".encode(), (HOST, UDP_PORT))
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    udp_sock.sendto("cookie".encode(), (HOST, UDP_PORT))
                elif event.key == pygame.K_ESCAPE:
                    udp_sock.sendto("quit".encode(), (HOST, UDP_PORT))
                    running = False

        screen.fill((0, 0, 0))  # Empty window appearance (black screen)
        pygame.display.flip()
        clock.tick(60)

    pygame.quit()
    udp_sock.close()

def lobby_loop(tcp_sock):
    global start_udp_mode, is_first_player, player_status_message
    pygame.init()
    screen = pygame.display.set_mode((800, 600))
    pygame.display.set_caption("Lobby")
    font = pygame.font.Font(None, 36)
    clock = pygame.time.Clock()

    while not start_udp_mode:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                tcp_sock.send("quit".encode())
                pygame.quit()
                return
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_s and is_first_player:
                    tcp_sock.send("REQUEST_START".encode())
                elif event.key == pygame.K_ESCAPE:
                    tcp_sock.send("quit".encode())
                    pygame.quit()
                    return

        screen.fill((20, 20, 20))
        lobby_text = font.render("In Lobby", True, (255, 255, 255))
        status_text = font.render(player_status_message, True, (255, 255, 255))
        instructions = font.render("Press ESC to quit.", True, (255, 255, 255))
        screen.blit(lobby_text, (20, 20))
        screen.blit(status_text, (20, 60))
        screen.blit(instructions, (20, 100))
        pygame.display.flip()
        clock.tick(60)

    pygame.quit()

def main():
    global start_udp_mode
    tcp_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    tcp_sock.connect((HOST, TCP_PORT))

    threading.Thread(target=tcp_receive, args=(tcp_sock,), daemon=True).start()

    try:
        lobby_loop(tcp_sock)
    except KeyboardInterrupt:
        pass
    finally:
        tcp_sock.close()

    if start_udp_mode:
        udp_mode()

if __name__ == '__main__':
    main()
